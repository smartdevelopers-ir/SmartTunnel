plugins {
    id 'com.android.application'
}

android {

    signingConfigs {
        debug {
            storeFile file('D:\\Projrcts\\FakeSMS\\smart_tunel.jks')
            storePassword 'mosi.1371'
            keyPassword 'mosi.1371'
            keyAlias 'original'
        }
        release {
            storeFile file('D:\\Projrcts\\FakeSMS\\smart_tunel.jks')
            storePassword 'mosi.1371'
            keyAlias 'original'
            keyPassword 'mosi.1371'
        }
    }
    namespace 'ir.smartdevelopers.smarttunnel'
    compileSdk 33

    defaultConfig {
        applicationId "ir.smartdevelopers.smarttunnel"
        minSdk 21
        targetSdk 33
        versionCode 8
        versionName "1.1.3"
        dimension = "implementation"
        buildConfigField("boolean", "openvpn3", "false")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        setProperty("archivesBaseName", "SmartTunnel-$versionName")

    }
    buildFeatures {
        aidl = true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions.resources.excludes.add("META-INF/DEPENDENCIES")
    packagingOptions{
        jniLibs.useLegacyPackaging = true
        jniLibs.keepDebugSymbols.add("**/*tun2socks.so")
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    ndkVersion '25.1.8937393'

    sourceSets {
        main{
            assets.setSrcDirs(["src/main/assets", "build/ovpnassets"])
            jniLibs.srcDirs = ['libs']
        }
    }
//    tasks.withType(Copy) {
//        if (name.startsWith('merge')) {
//            from('build/tun2socks')
//            into('src/main/libs')
//        }
//    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.work:work-runtime:2.8.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
//    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'dnsjava:dnsjava:2.1.9'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'com.google.code.gson:gson:2.10.1'
// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
//    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'
// https://mvnrepository.com/artifact/com.sshtools/maverick-synergy-client
//    implementation group: 'com.sshtools', name: 'maverick-synergy-client', version: '3.0.10'
// https://mvnrepository.com/artifact/com.hierynomus/sshj
//    implementation ('com.hierynomus:sshj:0.35.0'){
//        exclude group: 'com.jcraft', module: 'jzlib'
//    }

    implementation 'com.madgag.spongycastle:core:1.58.0.0'
// https://mvnrepository.com/artifact/com.madgag.spongycastle/prov
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
//    implementation 'com.getkeepsafe.relinker:relinker:1.4.4'





}



